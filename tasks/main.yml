---

- fail: msg="Bailing out. This role requires 'chroot_build_host' be defined."
  when: chroot_build_host is not defined
- fail: msg="Bailing out. Chroot's ansible_port must be defined"
  when: ansible_port is not defined
- fail: msg="Bailing out. Build host's ansible_port must be defined"
  when: hostvars[chroot_build_host]['ansible_port'] is not defined
- fail: msg="Bailing out. Chroot's ansible_port cannot be the same as the build_host"
  when: hostvars[chroot_build_host]['ansible_port'] == ansible_port

- name: Set chroot_dir if not already set
  set_fact:
   chroot_dir: "{{ chroot_machine_path }}/{{ inventory_hostname }}"
  when: chroot_dir is not defined
  tags: 
    - chrootbuild_boot_only

- block:

  - name: gather facts from chroot_build_host
    setup:
    delegate_facts: True
    tags: 
      - chrootbuild_boot_only

  - name: Copy needed facts from chroot_build_host
    set_fact:
      ansible_os_family: "{{hostvars[chroot_build_host]['ansible_os_family']}}"
      ansible_date_time: "{{hostvars[chroot_build_host]['ansible_date_time']}}"
      ansible_distribution: "{{hostvars[chroot_build_host]['ansible_distribution']}}"
      ansible_distribution_version: "{{hostvars[chroot_build_host]['ansible_distribution_version']}}"
      ansible_distribution_major_version: "{{hostvars[chroot_build_host]['ansible_distribution_major_version']}}"
      ansible_architecture: "{{hostvars[chroot_build_host]['ansible_architecture']}}"
    tags: 
      - chrootbuild_boot_only

  - name: Override facts
    set_fact: "{{ item.key }}={{ item.value }}"
    when: item.value is defined and item.value != ""
    with_items: "{{ chrootbuild_fact_override|dict2items }}"
    tags: 
      - chrootbuild_boot_only

  delegate_to: "{{ chroot_build_host }}"

- name: Set OS dependent variables
  include_vars: "{{ item }}"
  with_first_found:
   - "{{ ansible_distribution }}_{{ ansible_distribution_major_version }}.yml"
   - "{{ ansible_distribution }}.yml"
   - "{{ ansible_os_family }}_{{ ansible_distribution_major_version }}.yml"
   - "{{ ansible_os_family }}.yml"
   - default.yml
  tags: 
    - chrootbuild_boot_only

# Block delgate_to {{ chroot_build_host }}
- block:
  - name: Install any required packages on the build host
    package:
      name: "{{ chrootbuild_build_host_pkgs }}"
      state: installed

  - name: Ensure the chroot isn't booted
    service:
      name: "systemd-nspawn@{{ inventory_hostname }}"
      state: stopped
    tags: 
      - chrootbuild_boot_only

  - name: Erase existing chroot dir if configured
    file:
      name: "{{ chroot_dir }}"
      state: absent
    when: chroot_build_erase_chroot_before_build

  - name: Ensure chroot dir and needed subdirectories exist
    file:
      name: "{{ item }}"
      state: directory
    with_items:
      - "{{ chroot_dir }}"

  - name: OpenSSL Directories exist
    file:
      name: "{{ chroot_dir + item.path|default(chrootbuild_openssl_keys_path + '/' + item.name)|dirname }}"
      state: directory
    with_items:
      - "{{ chrootbuild_openssl_keys }}"
      - "{{ chrootbuild_openssl_certs }}"

  - name: Copying OpenSSL keys
    copy:
      content: "{{ item.key }}"
      dest: "{{ chroot_dir + item.path|default(chrootbuild_openssl_keys_path + '/' + item.name)}}"
      owner: "{{ item.owner|default('root')}}"
      group: "{{ item.group|default('root')}}"
      mode: "{{ item.mode|default('0600')}}"
      seuser: "{{ item.seuser|default('system_u')}}"
      serole: "{{ item.serole|default('object_r')}}"
      setype: "{{ item.setype|default('cert_t')}}"
      selevel: "{{ item.selevel|default('s0')}}"
    with_items: "{{ chrootbuild_openssl_keys }}"
    no_log: True

  - name: Copying certs
    copy:
      content: "{{ item.cert }}"
      dest: "{{ chroot_dir + item.path|default(chrootbuild_openssl_certs_path + '/' + item.name) }}"
      owner: "{{ item.owner|default('root')}}"
      group: "{{ item.group|default('root')}}"
      mode: "{{ item.mode|default('0644')}}"
      seuser: "{{ item.seuser|default('system_u')}}"
      serole: "{{ item.serole|default('object_r')}}"
      setype: "{{ item.setype|default('cert_t')}}"
      selevel: "{{ item.selevel|default('s0')}}"
    with_items: "{{ chrootbuild_openssl_certs }}"

  # Run package manager specific tasks
  - include_tasks: "{{ chrootbuild_pkg_mgr }}.yml"
  
  - name: Create authorized_keys for root
    authorized_key:
      user: root
      key: "{{ chrootbuild_root_ssh_pub_key }}"
      manage_dir: yes
      path: "{{ chroot_dir }}/root/.ssh/authorized_keys"
    when: chrootbuild_root_add_ssh_pub_key

  - name: Create systemd override directory
    file:
      path: "/etc/systemd/system/systemd-nspawn@{{ inventory_hostname }}.service.d"
      state: directory
      owner: root
      group: root
      mode: '0755'
    tags: 
      - chrootbuild_boot_only

  - name: Add systemd override so we don't use virtual networking
    template:
      src: systemd-nspawn.service.j2
      dest: "/etc/systemd/system/systemd-nspawn@{{ inventory_hostname }}.service.d/override.conf"
      owner: root
      group: root
      mode: '0644'
    tags: 
      - chrootbuild_boot_only

  - name: Run systemctl daemon-reload
    command: systemctl daemon-reload
    changed_when: false
    tags: 
      - chrootbuild_boot_only

  - name: Set the sshd port in sysconfig/sshd in the chroot so we don't conflict with the host
    lineinfile:
      dest: "{{ chroot_dir }}/{{ chrootbuild_sysconfig_sshd_path }}"
      regexp: "^{{ chrootbuild_sysconfig_sshd_var }}="
      line: "{{ chrootbuild_sysconfig_sshd_var }}=\"-p {{ ansible_port }}\""
      insertafter: EOF
      state: present
    tags: 
      - chrootbuild_boot_only

  - name: Disable problematic services from starting on boot
    file:
      name: "{{ chroot_dir }}/etc/systemd/system/{{ item.target }}.wants/{{ item.service }}"
      state: absent
    with_items:
      - "{{ chrootbuild_problematic_sevices }}"
    tags:
      - chrootbuild_boot_only

  - name: Boot the chroot
    service:
      name: "systemd-nspawn@{{ inventory_hostname }}"
      state: started
    tags:
      - chrootbuild_boot_only

  - name: Wait for chroot to be booted
    local_action: wait_for host="{{ chroot_build_host }}" port="{{ ansible_port }}" state=started timeout=60
    tags:
      - chrootbuild_boot_only

  delegate_to: "{{ chroot_build_host }}"
  when: not chrootbuild_teardown

- block:

  - name: Teardown | Poweroff the chroot
    service:
      name: "systemd-nspawn@{{ inventory_hostname }}"
      state: stopped

  - name: Teardown | Remove systemd override conf
    file:
      name: "/etc/systemd/system/systemd-nspawn@{{ inventory_hostname }}.service.d/override.conf"
      state: absent

  - name: Teardown | Run systemctl daemon-reload
    command: systemctl daemon-reload
    changed_when: false

  - name: Remove the OPTIONS setting in sysconfig/sshd in the chroot to revert sshd port
    lineinfile:
      dest: "{{ chroot_dir }}/{{ chrootbuild_sysconfig_sshd_path }}"
      regexp: "^{{ chrootbuild_sysconfig_sshd_var }}="
      state: absent

  delegate_to: "{{ chroot_build_host }}"
  when: chrootbuild_teardown
